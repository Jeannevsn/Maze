#include <Arduino.h>
#include <stdio.h>
#include <inttypes.h>
#include "maze.h"
#include <string>

using namespace std;

bool Maze::position_check(int x, int y)
{
    // conditions for not leaving the matrix
    if (x < 0 || y < 0)
        return false;
    else
    {
        if (x > WIDTH_MAZE - 1 || y > 7)
            return false;
        else
            return true;
    }
}

bool Maze::left_path_check(int x, int y, int game_maze[8][8][2])
{
    game_maze[8][8][2] = random_maze();
    if ((position_check(x - 1, y) == true) && (game_maze[y][x][0] == 0))
        return true;
    else
        return false;
}

bool Maze::right_path_check(int x, int y, int game_maze[8][8][2])
{
    game_maze[8][8][2] = random_maze();
    if ((position_check(x + 1, y) == true) && (game_maze[y][x + 1][0] == 0))
        return true;
    else
        return false;
}

bool Maze::bottom_path_check(int x, int y, int game_maze[8][8][2])
{
    game_maze[8][8][2] = random_maze();
    if ((position_check(x, y + 1) == true) && (game_maze[y][x][1] == 0))
        return true;
    else
        return false;
}

bool Maze::top_path_check(int x, int y, int game_maze[8][8][2])
{
    game_maze[8][8][2] = random_maze();
    if ((position_check(x, y - 1) == true) && (game_maze[y - 1][x][1] == 0))
        return true;
    else
        return false;
}

int Maze::random_maze(void)
{
    int random_number = 0;
    int random_maze;
    random_number = random(0, 9);

    switch (random_number)
    {
        case 0:
        random_maze = m_maze1[8][8][2];
        m_finish_maze[0][2];
        case 1:
        random_maze = m_maze2[8][8][2];
        m_finish_maze[1][2];
        case 2:
        random_maze = m_maze3[8][8][2];
        m_finish_maze[2][2];
        case 3:
        random_maze = m_maze4[8][8][2];
        m_finish_maze[3][2];
        case 4:
        random_maze = m_maze5[8][8][2];
        m_finish_maze[4][2];
        case 5:
        random_maze = m_maze6[8][8][2];
        m_finish_maze[5][2];
        case 6:
        random_maze = m_maze7[8][8][2];
        m_finish_maze[6][2];
        case 7:
        random_maze = m_maze8[8][8][2];
        m_finish_maze[7][2];
        case 8:
        random_maze = m_maze9[8][8][2];
        m_finish_maze[8][2];
    }
    return random_maze;
}

void Maze::print_state(void)
{
    printf("Numero maze : ", Maze::random_maze());
}

Maze::Maze()
{
    int m_maze1[8][8][2] = {
        // Row 0
        {{0, 0}, {0, 0}, {1, 0}, {0, 1}, {0, 0}, {1, 0}, {0, 1}, {0, 0}},
        // Row 1
        {{0, 0}, {1, 1}, {0, 1}, {1, 0}, {1, 0}, {0, 0}, {1, 1}, {0, 1}},
        // Row 2
        {{0, 1}, {0, 0}, {0, 0}, {1, 0}, {0, 1}, {1, 1}, {0, 1}, {0, 0}},
        // Row 3
        {{0, 0}, {1, 0}, {1, 0}, {1, 1}, {1, 0}, {0, 1}, {0, 1}, {1, 0}},
        // Row 4
        {{0, 0}, {0, 1}, {1, 1}, {0, 0}, {1, 1}, {0, 0}, {1, 0}, {0, 1}},
        // Row 5
        {{0, 0}, {1, 1}, {0, 0}, {0, 1}, {1, 0}, {1, 1}, {0, 1}, {0, 0}},
        // Row 6
        {{0, 0}, {1, 0}, {0, 1}, {1, 0}, {0, 0}, {1, 0}, {0, 1}, {1, 0}},
        // Row 7
        {{0, 0}, {1, 0}, {0, 0}, {0, 0}, {1, 0}, {1, 0}, {0, 0}, {0, 0}}};

    int m_maze2[8][8][2] = {
        // Row 0
        {{0, 0}, {0, 1}, {1, 0}, {0, 0}, {0, 0}, {0, 1}, {0, 0}, {1, 0}},
        // Row 1
        {{0, 0}, {0, 0}, {1, 0}, {1, 1}, {1, 0}, {0, 1}, {1, 0}, {0, 0}},
        // Row 2
        {{0, 0}, {1, 0}, {1, 0}, {1, 0}, {0, 1}, {1, 0}, {0, 1}, {1, 0}},
        // Row 3
        {{0, 0}, {1, 0}, {1, 0}, {1, 0}, {1, 0}, {1, 1}, {0, 1}, {1, 0}},
        // Row 4
        {{0, 0}, {1, 0}, {1, 0}, {1, 0}, {1, 1}, {0, 0}, {1, 1}, {0, 1}},
        // Row 5
        {{0, 0}, {1, 1}, {0, 1}, {1, 0}, {1, 0}, {0, 1}, {0, 1}, {0, 0}},
        // Row 6
        {{0, 0}, {1, 0}, {1, 0}, {0, 1}, {1, 0}, {1, 0}, {1, 0}, {0, 0}},
        // Row 7
        {{0, 0}, {0, 0}, {1, 0}, {0, 0}, {0, 0}, {1, 0}, {0, 0}, {1, 0}}};

    int m_maze3[8][8][2] = {
        // Row 0
        {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {1, 0}},
        // Row 1
        {{0, 1}, {1, 0}, {1, 0}, {1, 1}, {1, 0}, {0, 0}, {1, 1}, {0, 1}},
        // Row 2
        {{0, 0}, {0, 1}, {1, 1}, {0, 0}, {1, 0}, {1, 1}, {0, 1}, {0, 0}},
        // Row 3
        {{0, 0}, {1, 0}, {0, 1}, {0, 1}, {1, 0}, {0, 0}, {1, 1}, {0, 1}},
        // Row 4
        {{0, 0}, {1, 1}, {1, 0}, {0, 0}, {1, 0}, {1, 0}, {0, 0}, {1, 0}},
        // Row 5
        {{0, 1}, {1, 0}, {0, 1}, {1, 0}, {1, 0}, {1, 1}, {1, 1}, {0, 0}},
        // Row 6
        {{0, 0}, {1, 1}, {0, 0}, {1, 0}, {1, 1}, {0, 1}, {0, 0}, {1, 0}},
        // Row 7
        {{0, 0}, {0, 0}, {0, 0}, {1, 0}, {0, 0}, {0, 0}, {0, 0}, {1, 0}}};

    int m_maze4[8][8][2] = {
        // Row 0
        {{0, 0}, {0, 1}, {0, 0}, {1, 0}, {0, 0}, {1, 0}, {0, 1}, {0, 0}},
        // Row 1
        {{0, 1}, {0, 0}, {1, 1}, {0, 1}, {1, 1}, {0, 0}, {1, 0}, {0, 1}},
        // Row 2
        {{0, 0}, {0, 1}, {1, 0}, {0, 0}, {0, 0}, {1, 0}, {1, 0}, {1, 0}},
        // Row 3
        {{0, 0}, {1, 0}, {0, 1}, {1, 1}, {1, 1}, {0, 1}, {1, 1}, {0, 0}},
        // Row 4
        {{0, 0}, {1, 1}, {0, 1}, {0, 0}, {1, 0}, {0, 0}, {0, 0}, {1, 0}},
        // Row 5
        {{0, 1}, {0, 1}, {0, 1}, {1, 1}, {0, 1}, {1, 0}, {1, 0}, {1, 1}},
        // Row 6
        {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {1, 1}, {1, 1}, {0, 0}},
        // Row 7
        {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}};

    int m_maze5[8][8][2] = {
        // Row 0
        {{0, 0}, {0, 1}, {0, 1}, {0, 1}, {0, 0}, {0, 0}, {0, 1}, {0, 0}},
        // Row 1
        {{0, 0}, {1, 1}, {0, 1}, {0, 0}, {1, 0}, {1, 0}, {1, 0}, {0, 1}},
        // Row 2
        {{0, 1}, {0, 0}, {0, 1}, {1, 1}, {0, 1}, {1, 0}, {1, 1}, {0, 0}},
        // Row 3
        {{0, 0}, {0, 1}, {0, 0}, {1, 1}, {0, 1}, {0, 1}, {1, 0}, {1, 0}},
        // Row 4
        {{0, 1}, {0, 1}, {1, 0}, {0, 0}, {1, 1}, {0, 0}, {0, 0}, {1, 0}},
        // Row 5
        {{0, 0}, {0, 0}, {1, 0}, {1, 1}, {0, 0}, {1, 0}, {1, 1}, {1, 0}},
        // Row 6
        {{0, 0}, {1, 1}, {1, 1}, {0, 0}, {1, 1}, {1, 1}, {0, 0}, {1, 0}},
        // Row 7
        {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {1, 0}, {0, 0}}};

    int m_maze6[8][8][2] = {
        // Row 0
        {{0, 0}, {0, 1}, {0, 0}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 0}},
        // Row 1
        {{0, 1}, {0, 1}, {1, 0}, {0, 1}, {0, 1}, {0, 0}, {1, 1}, {0, 1}},
        // Row 2
        {{0, 0}, {0, 0}, {1, 1}, {0, 1}, {0, 0}, {1, 1}, {0, 1}, {0, 0}},
        // Row 3
        {{0, 0}, {1, 1}, {0, 0}, {1, 0}, {0, 1}, {1, 1}, {0, 0}, {1, 0}},
        // Row 4
        {{0, 0}, {1, 1}, {0, 1}, {0, 1}, {1, 0}, {0, 1}, {0, 1}, {1, 0}},
        // Row 5
        {{0, 1}, {0, 0}, {1, 0}, {0, 0}, {1, 0}, {1, 0}, {0, 1}, {0, 1}},
        // Row 6
        {{0, 0}, {0, 0}, {1, 0}, {1, 0}, {1, 0}, {1, 0}, {0, 1}, {0, 0}},
        // Row 7
        {{0, 0}, {1, 0}, {0, 0}, {1, 0}, {0, 0}, {1, 0}, {1, 0}, {0, 0}}};

    int m_maze7[8][8][2] = {
        // Row 0
        {{0, 0}, {0, 0}, {0, 0}, {1, 0}, {1, 0}, {0, 0}, {1, 1}, {0, 0}},
        // Row 1
        {{0, 0}, {1, 0}, {1, 0}, {0, 0}, {1, 0}, {1, 0}, {1, 0}, {0, 1}},
        // Row 2
        {{0, 0}, {1, 0}, {1, 0}, {1, 1}, {0, 1}, {1, 0}, {1, 1}, {0, 0}},
        // Row 3
        {{0, 1}, {1, 0}, {1, 1}, {0, 0}, {1, 0}, {0, 1}, {1, 0}, {1, 0}},
        // Row 4
        {{0, 0}, {0, 0}, {1, 1}, {0, 0}, {1, 0}, {0, 1}, {0, 1}, {1, 0}},
        // Row 5
        {{0, 0}, {1, 1}, {1, 0}, {0, 1}, {1, 0}, {1, 0}, {0, 1}, {0, 1}},
        // Row 6
        {{0, 0}, {1, 0}, {0, 1}, {1, 1}, {0, 1}, {1, 0}, {0, 0}, {1, 0}},
        // Row 7
        {{0, 0}, {1, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {1, 0}, {0, 0}}};

    int m_maze8[8][8][2] = {
        // Row 0
        {{0, 0}, {0, 1}, {0, 0}, {0, 1}, {0, 0}, {1, 1}, {0, 0}, {0, 0}},
        // Row 1
        {{0, 0}, {0, 0}, {1, 1}, {0, 0}, {1, 1}, {0, 1}, {0, 1}, {1, 1}},
        // Row 2
        {{0, 0}, {1, 1}, {0, 0}, {1, 0}, {0, 1}, {0, 1}, {0, 1}, {0, 0}},
        // Row 3
        {{0, 1}, {1, 0}, {0, 1}, {1, 0}, {1, 0}, {0, 1}, {1, 0}, {0, 1}},
        // Row 4
        {{0, 0}, {0, 1}, {1, 0}, {1, 0}, {1, 0}, {0, 0}, {1, 0}, {0, 1}},
        // Row 5
        {{0, 1}, {0, 0}, {1, 0}, {1, 0}, {1, 1}, {1, 0}, {1, 1}, {0, 0}},
        // Row 6
        {{0, 0}, {0, 1}, {0, 1}, {1, 0}, {1, 0}, {0, 1}, {1, 0}, {0, 1}},
        // Row 7
        {{0, 0}, {0, 0}, {0, 0}, {1, 0}, {0, 0}, {1, 0}, {0, 0}, {0, 0}}};

    int m_maze9[8][8][2] = {
        // Row 0
        {{0, 0}, {0, 1}, {0, 0}, {1, 1}, {0, 0}, {0, 0}, {0, 0}, {1, 0}},
        // Row 1
        {{0, 0}, {1, 1}, {0, 1}, {0, 1}, {0, 1}, {1, 0}, {1, 0}, {1, 0}},
        // Row 2
        {{0, 1}, {0, 0}, {1, 1}, {0, 1}, {0, 1}, {0, 1}, {1, 0}, {1, 0}},
        // Row 3
        {{0, 0}, {0, 1}, {0, 1}, {1, 1}, {0, 1}, {0, 0}, {1, 0}, {1, 0}},
        // Row 4
        {{0, 1}, {0, 0}, {1, 0}, {0, 1}, {0, 1}, {0, 1}, {1, 0}, {0, 1}},
        // Row 5
        {{0, 0}, {0, 1}, {1, 1}, {0, 0}, {1, 0}, {0, 1}, {0, 1}, {1, 0}},
        // Row 6
        {{0, 0}, {0, 1}, {0, 1}, {0, 1}, {1, 0}, {1, 0}, {0, 1}, {1, 0}},
        // Row 7
        {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {1, 0}, {0, 0}, {0, 0}, {0, 0}}};

    int m_finish_maze[9][2] = {{6, 6}, {1, 6}, {0, 6}, {4, 6}, {1, 6}, {5, 3}, {6, 0}, {2, 7}, {7, 0}};
}